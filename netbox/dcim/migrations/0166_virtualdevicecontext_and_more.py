# Generated by Django 4.1.1 on 2022-11-01 18:05

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import utilities.json


class Migration(migrations.Migration):

    dependencies = [
        ('extras', '0082_exporttemplate_content_types'),
        ('tenancy', '0008_unique_constraints'),
        ('ipam', '0062_unique_constraints'),
        ('dcim', '0165_remove_consoleport_dcim_consoleport_unique_device_name_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='VirtualDeviceContext',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=64)),
                ('status', models.CharField(blank=True, max_length=50)),
                ('identifier', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('comments', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.RemoveConstraint(
            model_name='consoleport',
            name='dcim_consoleport_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='consoleserverport',
            name='dcim_consoleserverport_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='devicebay',
            name='dcim_devicebay_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='interface',
            name='dcim_interface_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='modulebay',
            name='dcim_modulebay_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='poweroutlet',
            name='dcim_poweroutlet_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='powerport',
            name='dcim_powerport_unique_device_name',
        ),
        migrations.RemoveConstraint(
            model_name='rearport',
            name='dcim_rearport_unique_device_name',
        ),
        migrations.AddField(
            model_name='devicetype',
            name='vdc_type',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AddConstraint(
            model_name='consoleport',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_consoleport_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='consoleserverport',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_consoleserverport_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='devicebay',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_devicebay_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='interface',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_interface_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='modulebay',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_modulebay_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='poweroutlet',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_poweroutlet_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='powerport',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_powerport_unique_device_name'),
        ),
        migrations.AddConstraint(
            model_name='rearport',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_rearport_unique_device_name'),
        ),
        migrations.AddField(
            model_name='virtualdevicecontext',
            name='device',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vdcs', to='dcim.device'),
        ),
        migrations.AddField(
            model_name='virtualdevicecontext',
            name='primary_ip4',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='ipam.ipaddress'),
        ),
        migrations.AddField(
            model_name='virtualdevicecontext',
            name='primary_ip6',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='ipam.ipaddress'),
        ),
        migrations.AddField(
            model_name='virtualdevicecontext',
            name='tags',
            field=taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag'),
        ),
        migrations.AddField(
            model_name='virtualdevicecontext',
            name='tenant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='vdcs', to='tenancy.tenant'),
        ),
        migrations.AddField(
            model_name='interface',
            name='vdcs',
            field=models.ManyToManyField(related_name='interfaces', to='dcim.virtualdevicecontext'),
        ),
        migrations.AddConstraint(
            model_name='virtualdevicecontext',
            constraint=models.UniqueConstraint(fields=('device', 'identifier'), name='dcim_virtualdevicecontext_device_identifiers', violation_error_message='A VDC with this identifier already exists on this device.'),
        ),
        migrations.AddConstraint(
            model_name='virtualdevicecontext',
            constraint=models.UniqueConstraint(fields=('device', 'name'), name='dcim_virtualdevicecontext_name', violation_error_message='A VDC with this name already exists on this device.'),
        ),
    ]
