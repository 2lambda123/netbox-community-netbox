# Generated by Django 4.2.9 on 2024-02-05 21:37
import inspect

from django.db import migrations, models
import django.db.models.deletion


def update_event_rules(apps, schema_editor):
    Script = apps.get_model('extras', 'Script')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ct = ContentType.objects.filter(app_label='extras', model='script').first()

    EventRule = apps.get_model('extras', 'EventRule')
    ct_script_module = ContentType.objects.filter(app_label='extras', model='scriptmodule').first()
    for rule in EventRule.objects.filter(action_object_type=ct_script_module):
        name = rule.action_parameters.get('script_name')
        obj, created = Script.objects.get_or_create(
            module_id=rule.action_object_id,
            name=name,
            defaults={'is_valid': False}
        )

        rule.action_object_type = ct
        rule.action_object_id = obj.id
        rule.save()


def is_script(obj):
    """
    Returns True if the object is a Script or Report.
    """
    from extras.scripts import Script
    from extras.reports import Report

    try:
        return (issubclass(obj, Report) and obj != Report) or (issubclass(obj, Script) and obj != Script)
    except TypeError:
        return False


def get_module_scripts(apps, instance):

    def _get_name(cls):
        # For child objects in submodules use the full import path w/o the root module as the name
        return cls.full_name.split(".", maxsplit=1)[1]

    try:
        module = instance.get_module()
    except Exception as e:
        module = None

    scripts = {}
    ordered = getattr(module, 'script_order', [])

    for cls in ordered:
        scripts[_get_name(cls)] = cls
    for name, cls in inspect.getmembers(module, is_script):
        breakpoint()
        if cls not in ordered:
            scripts[_get_name(cls)] = cls

    return scripts


def update_scripts(apps, schema_editor):
    ScriptModule = apps.get_model('extras', 'ScriptModule')
    Script = apps.get_model('extras', 'Script')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    ct = ContentType.objects.filter(app_label='extras', model='script').first()

    for module in ScriptModule.objects.all():
        for script in get_module_scripts(apps, module).keys():
            obj = Script.objects.create(
                name=script,
                module=ScriptModule.objects.get(file_root=module.file_root, file_path=module.file_path),
            )

            # update all jobs associated with this module/name to point to the new script obj
            if ct:
                module.jobs.filter(name=script).update(object_type=ct, object_id=obj.id)


class Migration(migrations.Migration):

    dependencies = [
        ('extras', '0107_convert_reports_to_scripts'),
    ]

    operations = [
        migrations.CreateModel(
            name='Script',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=79)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scripts', to='extras.scriptmodule')),
                ('is_executable', models.BooleanField(default=True))
            ],
            options={
                'ordering': ('module', 'name'),
            },
        ),
        migrations.AddConstraint(
            model_name='script',
            constraint=models.UniqueConstraint(fields=('name', 'module'), name='extras_script_unique_name_module'),
        ),
        migrations.RunPython(
            code=update_scripts,
            reverse_code=migrations.RunPython.noop
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunPython(
                    code=update_event_rules,
                    reverse_code=migrations.RunPython.noop
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='eventrule',
                    name='action_parameters',
                ),
            ]
        ),
    ]
