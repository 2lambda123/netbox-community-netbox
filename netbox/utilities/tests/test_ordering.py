from django.test import TestCase

from utilities.ordering import naturalize, naturalize_interface


class NaturalizationTestCase(TestCase):
    """
    Validate the operation of the functions which generate values suitable for natural ordering.
    """
    def test_naturalize(self):

        # Original, naturalized
        data = (
            ('abc', 'abc'),
            ('123', '00000123'),
            ('abc123', 'abc00000123'),
            ('123abc', '00000123abc'),
            ('123abc456', '00000123abc00000456'),
            ('abc123def', 'abc00000123def'),
            ('abc123def456', 'abc00000123def00000456'),
        )

        for origin, naturalized in data:
            self.assertEqual(naturalize(origin, max_length=100), naturalized)

    def test_naturalize_max_length(self):
        self.assertEqual(naturalize('abc123def456', max_length=10), 'abc0000012')

    def test_naturalize_interface(self):

        # Original, naturalized
        data = (

            # IOS/JunOS-style
            ('Gi', 'GI........................................................................................Gi........'),
            ('Gi1', '1500002.............................................................................................'),
            ('Gi1.0', '1500002000001.......................................................................................'),
            ('Gi1.1', '1500002000002.......................................................................................'),
            ('Gi1:0', '1500002900001.......................................................................................'),
            ('Gi1:0.0', '1500002900001000001.................................................................................'),
            ('Gi1:0.1', '1500002900001000002.................................................................................'),
            ('Gi1:1', '1500002900002.......................................................................................'),
            ('Gi1:1.0', '1500002900002000001.................................................................................'),
            ('Gi1:1.1', '1500002900002000002.................................................................................'),
            ('Gi1/2', '1500002900003.......................................................................................'),
            ('Gi1/2/3', '1500002900003900004.................................................................................'),
            ('Gi1/2/3/4', '1500002900003900004900005...........................................................................'),
            ('Gi1/2/3/4/5', '1500002900003900004900005900006.....................................................................'),
            ('Gi1/2/3/4/5:6', '1500002900003900004900005900006900007...............................................................'),
            ('Gi1/2/3/4/5:6.7', '1500002900003900004900005900006900007000008.........................................................'),

            # Generic
            ('PCIe1-p1', '200000200002........................................................................................'),
            ('PCIe1-p99', '200000200100........................................................................................'),
            ('Interface 1', 'IN00002.............................................................................................'),
            ('Interface 1 (other)', 'IN00002................................................................................... (other)..'),
            ('Interface 99', 'IN00100.............................................................................................'),
        )

        for origin, naturalized in data:
            self.assertEqual(naturalize_interface(origin, max_length=100), naturalized)

    def test_naturalize_interface_max_length(self):
        self.assertEqual(naturalize_interface('Gi1/2/3', max_length=20), '1500002900003900004.')
